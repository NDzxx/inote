/*
Navicat MySQL Data Transfer

Source Server         : local
Source Server Version : 50709
Source Host           : localhost:3306
Source Database       : inote

Target Server Type    : MYSQL
Target Server Version : 50709
File Encoding         : 65001

Date: 2017-06-01 16:46:45
*/

SET FOREIGN_KEY_CHECKS=0;
-- ----------------------------
-- Table structure for `message`
-- ----------------------------
DROP TABLE IF EXISTS `message`;
CREATE TABLE `message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `guest_name` varchar(50) DEFAULT NULL,
  `content` varchar(2000) DEFAULT NULL,
  `reply` varchar(2000) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `post_id` int(11) NOT NULL,
  `post_title` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of message
-- ----------------------------

-- ----------------------------
-- Table structure for `post`
-- ----------------------------
DROP TABLE IF EXISTS `post`;
CREATE TABLE `post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL,
  `publish_at` datetime NOT NULL,
  `content` text,
  `thumb` varchar(500) DEFAULT NULL,
  `tag` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of post
-- ----------------------------
INSERT INTO `post` VALUES ('3', 'beego压测？', '2017-05-19 14:41:59', '1.考虑用beego做一个压测  \n\n2.用vue.js 的elementUI做后台界面  \n\n3.对应以前的xml全部用数据库做成表，直接读取表简单多了 \n\n', '', '任务记录');
INSERT INTO `post` VALUES ('4', 'golang routine错误', '2017-05-19 14:47:32', '\n认识golang也不少时间了，也做过几个项目。最近发现之前用golang写的一个服务，内存涨得比较快，一直没找出来原因来。今天把疑惑发到群里，经过golang学习班的童鞋的指点，发现我一个常用的错误。\n\n在不少golang入门的文章上，用并发的例子一般是这样写的:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    messages := make(chan int)\n    go func() {\n        time.Sleep(time.Second * 3)\n        messages <- 1\n    }()\n    go func() {\n        time.Sleep(time.Second * 2)\n        messages <- 2\n    }() \n    go func() {\n        time.Sleep(time.Second * 1)\n        messages <- 3\n    }()\n    go func() {\n        for i := range messages {\n            fmt.Println(i)\n        }\n    }()\n    time.Sleep(time.Second * 5)\n}\n```\n我之前的项目，也一直是这样写。今天和群里的讨论了下，才发觉，这个写法其实是比较丑陋的。\n\n其实可以通过这个去实现。\n\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"sync\"\n)\n\nfunc main() {\n    urls := []string{\n        \"http://www.reddit.com/r/aww.json\",\n        \"http://www.reddit.com/r/funny.json\",\n        \"http://www.reddit.com/r/programming.json\",\n    }\n    jsonResponses := make(chan string)\n\n    var wg sync.WaitGroup\n\n    wg.Add(len(urls))\n\n    for _, url := range urls {\n        go func(url string) {\n            defer wg.Done()\n            res, err := http.Get(url)\n            if err != nil {\n                log.Fatal(err)\n            } else {\n                defer res.Body.Close()\n                body, err := ioutil.ReadAll(res.Body)\n                if err != nil {\n                    log.Fatal(err)\n                } else {\n                    jsonResponses <- string(body)\n                }\n            }\n        }(url)\n    }\n\n    go func() {\n        for response := range jsonResponses {\n            fmt.Println(response)\n        }\n    }()\n\n    wg.Wait()\n}\n\n```\n这个更简单，而且也更方便使用。性能方面，应该比chan要好点。\n\n我之前的一个案例是，client发一个http request过来， 服务器收到请求，然后同时开N个go routine去处理，然后每个处理完成后，通过chan 进行传递给主线程，主线程判断chan的是否接收完成所有的请求，然后再响应。\n\n就是用的第一种方法。\n\n今天根据群里面体的建议，重构了下。使用list来处理每个用户请求。\n\n比如，有个全局Map变量： map[int]list,  每个请求创建一个巍峨唯一的随机数或者sessionId, 然后每个go rouine处理完后，根据sessionid去查找对应的list, 插入数据。\n\n可以利用list来实现异步队列的机制，避免锁。\n\n所以特地在这记录下来，当然各位新人的参考。\n\n \n\n附上国外的一篇文章：  http://nathanleclaire.com/blog/2014/02/15/how-to-wait-for-all-goroutines-to-finish-executing-before-continuing/\n\n', '', 'golang');
INSERT INTO `post` VALUES ('6', 'vue.js begin', '2017-05-19 20:26:11', '周末回去看下vue.js的东西\n练习熟悉elementUI相关，结合beego后端框架使用\n', '', 'vue.js');
INSERT INTO `post` VALUES ('7', 'mysjTest 安装', '2017-05-23 18:04:36', '#mysjTest 安装\n## npm win下安装\n前端：\nsrc 来自https://github.com/diycp/vue-manage-system \n做必要修改，后端连接beego\nvue-manage-system是前端部分，\n\nnpm下载地址：https://nodejs.org/en/download/ \n \n安装npm后，启动CMD依次执行以下两条命令\nnpm config set prefix \"D:\\Program Files\\nodejs\\node_global\"\n设置环境变量\nNODE_PATH = F:\\set-soft\\Node\\nodejs\nPATH = %NODE_PATH%\\;%NODE_PATH%\\node_modules;%NODE_PATH%\\node_global;\n\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm install -g vue-cli\ncnpm install -g webpack\ncnpm install -g webpack-dev-server\n新建或者gitclone项目后\ncnpm install vue-datatable  -S\ncnpm install vue-router -S\ncnpm install axios -S\ncnpm install element-ui -S\n//本地运行\nnpm run dev\n//生成生产环境需要的dist\nnpm run build\n\n```\n可以生成对应的前端代码，在dist内复制到beego服务端内使用\n\n后端\nbeego构成的服务器', '', 'vuejs学习和使用');
INSERT INTO `post` VALUES ('8', 'vue加载外部的js文件', '2017-05-23 18:07:05', '引用的外部文件md5.js加入一行，文件路径相对于login.vue在../../assets/md5.js\n```javascript\n\nexport { //很关键\n    hex_md5\n}\n\n```\n\n```javascript\n<template>\n    <div class=\"login-wrap\">\n        <div class=\"ms-title\">后台管理系统</div>\n        <div class=\"ms-login\">\n            <el-form :model=\"ruleForm\" :rules=\"rules\" ref=\"ruleForm\" label-width=\"0px\" class=\"demo-ruleForm\">\n                <el-form-item prop=\"username\">\n                    <el-input v-model=\"ruleForm.username\" placeholder=\"username\"></el-input>\n                </el-form-item>\n                <el-form-item prop=\"password\">\n                    <el-input type=\"password\" placeholder=\"password\" v-model=\"ruleForm.password\" @keyup.enter.native=\"submitForm(\'ruleForm\')\"></el-input>\n                </el-form-item>\n                <div class=\"login-btn\">\n                    <el-button type=\"primary\" @click=\"submitForm(\'ruleForm\')\">登录</el-button>\n                </div>\n                <p style=\"font-size:12px;line-height:30px;color:#999;\">Tips : 用户名和密码随便填。</p>\n            </el-form>\n        </div>\n    </div>\n</template>\n<script>\n    import {hex_md5} from \'../../assets/md5.js\' //注意路径\n    export default {\n        data: function(){\n            return {\n                ruleForm: {\n                    username: \'\',\n                    password: \'\'\n                },\n                rules: {\n                    username: [\n                        { required: true, message: \'请输入用户名\', trigger: \'blur\' }\n                    ],\n                    password: [\n                        { required: true, message: \'请输入密码\', trigger: \'blur\' }\n                    ]\n                }\n            }\n        },\n        methods: {\n            submitForm(formName) {\n                const self = this;\n                self.$refs[formName].validate((valid) => {\n                    if (valid) {\n                        // localStorage.setItem(\'ms_username\',self.ruleForm.username);\n						// 改为去后台登录\n                        this.$ajax({\n                            method: \'post\',\n                            url: \'/adminLogin\',\n                            data: {\n                                username: self.ruleForm.username,\n                                password: hex_md5(self.ruleForm.password),\n                            }\n                        })\n                        self.$router.push(\'/readme\');\n                    } else {\n                        console.log(\'error submit!!\');\n                        return false;\n                    }\n                });\n            }\n        }\n    }\n</script>\n```\n\n然后直接cnpm run build后就可以使用\n\n下一步就是看一下那个vue-dataTables是怎么加载动态表格和弹出窗口的\nhttp://www.luuxii.com/702.html ', '', 'vuejs学习和使用');
INSERT INTO `post` VALUES ('9', 'golang execmd执行sh', '2017-05-24 10:19:13', '代码如下\n```go\n// exeCmd project main.go\npackage main\n\nimport (\n	\"bufio\"\n	\"fmt\"\n	\"io\"\n	\"os/exec\"\n)\n\nfunc execCommand(commandName string, params []string) bool {\n	cmd := exec.Command(commandName, params...)\n\n	//显示运行的命令\n	fmt.Println(cmd.Args)\n\n	stdout, err := cmd.StdoutPipe()\n\n	if err != nil {\n		fmt.Println(err)\n		return false\n	}\n\n	cmd.Start()\n\n	reader := bufio.NewReader(stdout)\n\n	//实时循环读取输出流中的一行内容\n	for {\n		line, err2 := reader.ReadString(\'\\n\')\n		if err2 != nil || io.EOF == err2 {\n			break\n		}\n		fmt.Println(line)\n	}\n\n	cmd.Wait()\n	return true\n}\n\nfunc executeRunSH() {\n	command := \"/bin/bash\"\n	params := []string{\"-c\", \"sh run.sh\"}\n\n	execCommand(command, params)\n	\n	/*或者是这样\n	command := \"./closeApp.sh\"\n	params := []string{\"WebSvr\"}\n	*/\n}\n\nfunc main() {\n	fmt.Println(\"execute run.sh\")\n	go executeRunSH()\n	var cmd int\n	fmt.Scanf(\"%d\", &cmd)\n	switch cmd {\n	default:\n		fmt.Println(\"cmd:\", cmd)\n	}\n}\n\n```', '', 'golang');
INSERT INTO `post` VALUES ('10', '流程梳理', '2017-05-27 14:09:32', '# 魔域世界客户端流程\n账服和游服连接在虚拟机上看看\n> * 1.账服登录\n> * 2.游服登录\n> * 3.请求角色列表\n> * 4.可选操作 建立角色（请求随机名字） \n> * 5.选择角色 \n> * 6.获取角色信息\n\n##1.账服登录\n```go \n//pc端没有登录账服的操作，填写的账号就是渠道账号,其他平台在调用对应sdk登录成功后填写该值\n\nmessage MsgChanAuthC2S{\n	required int32  chanId = 1;		 //渠道ID \n	required string chanKey = 2; //渠道方key   内部测试填账号\n	required string chanToken = 3;	//内部测试填密码\n}\n\n\nloginData.ChanId = 1; // LoginData.standalongToken\nloginData.ChanKey = nameInputField.text; // test1 ~1000\nloginData.ChanToken = pswInputField.text; //1\nloginData.ChannelName = \"pc\";\nGameData.Instance.loginData = loginData;\n\n//发送的返回值\nmessage MsgChanAuthS2C{\n	required ErrorMsg errmsg = 1;\n	optional int64 idAccount = 2;	//认证成功才有\n	optional string accountToken = 3; //登录服token\n}\n\n```\n\n## 2.游服登录\n```go\n\n//游服登录认证 使用message MsgChanAuthS2C 发送的返回信息\nmessage MsgGSAuthC2S{\n	required int64 idAccount = 1; //账号服 账号ID\n	required string token = 2;		\n}\n\nmessage MsgGSAuthS2C{\n	required ErrorMsg errmsg = 1;\n}\n```\n## 3.请求角色(战队)\n```go\n//请求战队列表\nmessage MsgQueryUserListC2S{\n}\n\nmessage MsgQueryUserListS2C{\n	required ErrorMsg errmsg = 1;\n	repeated BrifUserInfo userinfoArr = 2;\n}\n\n```\n## 4.可选操作，建立角色\n```go\n//请求随机名字\nmessage MsgQueryRandNameC2S\n{\n	required int32 sex = 1;  //值1,2\n}\n\nmessage MsgQueryRandNameS2C\n{\n	required ErrorMsg errmsg = 1;\n	required string name = 2;\n}\n\n//建立角色\nmessage MsgCreateUserC2S{\n	required string name = 1;\n	required int32 sex = 2;\n}\n\nmessage MsgCreateUserS2C{\n	enum ResultType {\n		OK = 0; //成功\n		ERROR = 1; //未知错误\n		NAME_EXIST = 2; //名字已经存在\n		NO_NAME = 3; //没有提供名字\n		NO_SEX = 4; //没有提供性别\n		SEX_UNLAWFUL = 5; //性别不合法\n		NAME_UNLAWFUL = 6; //名字不合法\n	}\n	required ResultType result = 1;\n	optional BrifUserInfo userinfo = 2;\n}\n\n```\n\n## 5.选择战队\n```go\nmessage MsgChooseUserC2S{\n	required int64 iduser = 1;\n}\n\nmessage MsgChooseUserS2C{\n	required ErrorMsg errmsg = 1;\n}\n\nmessage MsgQueryRandNameC2S\n{\n	required int32 sex = 1;\n}\n```\n## 6.获取角色信息\n```go\nmessage MsgQueryUserInfoC2S{\n	required int64 iduser = 1;\n}\n\nmessage MsgQueryUserInfoS2C\n{\n	required int64 iduser		= 1;\n	optional string name		= 2;\n	optional int32 enargy_value	= 3;	//体力值\n	optional int32 sex			= 4;\n	optional int32 fight_power	= 5;	//战斗力\n	optional int64 money		= 6;\n	optional int64 e_money		= 7;\n	optional int64 bind_e_money = 8;\n	optional int32 forces_type	= 9;	//势力类型\n	optional int32 designation	= 10;	//称号\n	optional int32 exp			= 11;\n	optional int32 vip_level	= 13;\n	optional int32 level		= 12;\n	optional int32 mapid		= 14;\n	optional int64 showHeroId	= 15;\n	optional int32 expBall		= 16; //经验球\n}\n\n```\n## 7.请求用户详细信息\nMsgQueryUserInfoC2S\n\n## 8.进入地图\n```go\n//客户端请求进入某张地图\nmessage MsgEnterMapC2S\n{\n	required int64 unMapId = 1;\n}\n```\n\n## 9.载入资源完成，请求npc和怪物信息\n\n```\nmessage MsgLoadSceneSuccC2S {\n}\n\n答复\n//monster\nmessage MonsterInfo {\n	required int32 idMonster = 1;\n	optional int64 idGroup = 2;\n	optional int32 lookFace = 3;\n	optional string portal = 4;\n	optional string rotation = 5;\n	optional float scale = 6;\n	optional string name = 7;\n}\n\nmessage MsgSynMonsterInfoS2C {\n	enum SynType {\n		LIST = 1;\n		ADD = 2;\n		REMOVE = 3;\n	}\n\n	required SynType t = 1;\n	repeated MonsterInfo infos = 2;\n}\n\n//or npc\nmessage MsgSynNpcInfoS2C {\n	enum SynType {\n		LIST = 1;\n		ADD = 2;\n		REMOVE = 3;\n	}\n\n	required SynType t = 1;\n	repeated NpcInfo infos = 2;\n}\n\n```', '', '压力测试');
INSERT INTO `post` VALUES ('11', '虚拟机配置压力测试服', '2017-05-27 14:14:37', '# 压力服配置\n1.服务器和密码\n进程控制\nhttp://192.168.233.130:9001\n用户:zxx 密码:123456\n\n中转服务器\nhttp://192.168.233.130:7678\n用户:zxx 密码:123456\n\n游服\nhttp://192.168.233.130:8279\n\n账服 192.168.233.130:8090\n\n数据库路径\nD:\\ochw\\share\\mysjPress\\release\\sql', '', '压力测试');
INSERT INTO `post` VALUES ('12', 'vendor', '2017-05-24 17:52:56', '# The Vendor Tool for Go\n`go get -u github.com/kardianos/govendor`\n\nNew users please read the [FAQ](doc/faq.md)\n\nPackage developers should read the [developer guide](doc/dev-guide.md).\n\nFor a high level overview read the [whitepaper](doc/whitepaper.md)\n\nUses the go1.5+ vendor folder. Multiple workflows supported, single tool.\n\n[![Build Status](https://travis-ci.org/kardianos/govendor.svg?branch=master)](https://travis-ci.org/kardianos/govendor)\n[![Build status](https://ci.appveyor.com/api/projects/status/skf1t3363y6tycuc/branch/master?svg=true)](https://ci.appveyor.com/project/kardianos/govendor/branch/master)\n[![GoDoc](https://godoc.org/github.com/kardianos/govendor?status.svg)](https://godoc.org/github.com/kardianos/govendor)\n\n * Copy existing dependencies from $GOPATH with `govendor add/update`.\n * If you ignore `vendor/*/`, restore dependencies with `govendor sync`.\n * Pull in new dependencies or update existing dependencies directly from\n	remotes with `govendor fetch`.\n * Migrate from legacy systems with `govendor migrate`.\n * Supports Linux, OS X, Windows, probably all others.\n * Supports git, hg, svn, bzr (must be installed an on the PATH).\n\n## Notes\n\n * The project must be within a $GOPATH/src.\n * If using go1.5, ensure you `set GO15VENDOREXPERIMENT=1`.\n\n### Quick Start, also see the [FAQ](doc/faq.md)\n```\n# Setup your project.\ncd \"my project in GOPATH\"\ngovendor init\n\n# Add existing GOPATH files to vendor.\ngovendor add +external\n\n# View your work.\ngovendor list\n\n# Look at what is using a package\ngovendor list -v fmt\n\n# Specify a specific version or revision to fetch\ngovendor fetch golang.org/x/net/context@a4bbce9fcae005b22ae5443f6af064d80a6f5a55\ngovendor fetch golang.org/x/net/context@v1   # Get latest v1.*.* tag or branch.\ngovendor fetch golang.org/x/net/context@=v1  # Get the tag or branch named \"v1\".\n\n# Update a package to latest, given any prior version constraint\ngovendor fetch golang.org/x/net/context\n\n# Format your repository only\ngovendor fmt +local\n\n# Build everything in your repository only\ngovendor install +local\n\n# Test your repository only\ngovendor test +local\n\n```\n\n## Sub-commands\n```\n	init     Create the \"vendor\" folder and the \"vendor.json\" file.\n	list     List and filter existing dependencies and packages.\n	add      Add packages from $GOPATH.\n	update   Update packages from $GOPATH.\n	remove   Remove packages from the vendor folder.\n	status   Lists any packages missing, out-of-date, or modified locally.\n	fetch    Add new or update vendor folder packages from remote repository.\n	sync     Pull packages into vendor folder from remote repository with revisions\n  	             from vendor.json file.\n	migrate  Move packages from a legacy tool to the vendor folder with metadata.\n	get      Like \"go get\" but copies dependencies into a \"vendor\" folder.\n	license  List discovered licenses for the given status or import paths.\n	shell    Run a \"shell\" to make multiple sub-commands more efficient for large\n	             projects.\n\n	go tool commands that are wrapped:\n	  `+<status>` package selection may be used with them\n	fmt, build, install, clean, test, vet, generate, tool\n```\n\n## Status\n\nPackages can be specified by their \"status\".\n```\n	+local    (l) packages in your project\n	+external (e) referenced packages in GOPATH but not in current project\n	+vendor   (v) packages in the vendor folder\n	+std      (s) packages in the standard library\n\n	+excluded (x) external packages explicitly excluded from vendoring\n	+unused   (u) packages in the vendor folder, but unused\n	+missing  (m) referenced packages but not found\n\n	+program  (p) package is a main package\n\n	+outside  +external +missing\n	+all      +all packages\n```\n\nStatus can be referenced by their initial letters.\n\n * `+std` same as `+s`\n * `+external` same as `+ext` same as `+e`\n * `+excluded` same as `+exc` same as `+x`\n\nStatus can be logically composed:\n\n * `+local,program` (local AND program) local packages that are also programs\n * `+local +vendor` (local OR vendor) local packages or vendor packages\n * `+vendor,program +std` ((vendor AND program) OR std) vendor packages that are also programs\n	or std library packages\n * `+vendor,^program` (vendor AND NOT program) vendor package that are not \"main\" packages.\n\n## Package specifier\n\nThe full package-spec is:\n`<path>[::<origin>][{/...|/^}][@[<version-spec>]]`\n\nSome examples:\n\n * `github.com/kardianos/govendor` specifies a single package and single folder.\n * `github.com/kardianos/govendor/...` specifies `govendor` and all referenced\n	packages under that path.\n * `github.com/kardianos/govendor/^` specifies the `govendor` folder and all\n	sub-folders. Useful for resources or if you don\'t want a partial repository.\n * `github.com/kardianos/govendor/^::github.com/myself/govendor` same as above\n	but fetch from user \"myself\".\n * `github.com/kardianos/govendor/...@abc12032` all referenced packages at\n	revision `abc12032`.\n * `github.com/kardianos/govendor/...@v1` same as above, but get the most recent\n	\"v1\" tag, such as \"v1.4.3\".\n * `github.com/kardianos/govendor/...@=v1` get the exact version \"v1\".\n\n## Packages and Status\n\nYou may specify multiple package-specs and multiple status in a single command.\nCommands that accept status and package-spec:\n\n * list\n * add\n * update\n * remove\n * fetch\n\nYou may pass arguments to govendor through stdin if the last argument is a \"-\".\nFor example `echo +vendor | govendor list -` will list all vendor packages.\n\n## Ignoring build tags and excluding packages\nIgnoring build tags is opt-out and is designed to be the opposite of the build\nfile directives which are opt-in when specified. Typically a developer will\nwant to support cross platform builds, but selectively opt out of tags, tests,\nand architectures as desired.\n\nTo ignore additional tags edit the \"vendor.json\" file and add tag to the vendor\n\"ignore\" file field. The field uses spaces to separate tags to ignore.\nFor example the following will ignore both test and appengine files.\n```\n{\n	\"ignore\": \"test appengine\",\n}\n```\n\nSimilarly, some specific packages can be excluded from the vendoring process.\nThese packages will be listed as `excluded` (`x`), and will not be copied to the\n\"vendor\" folder when running `govendor add|fetch|update`.\n\nAny sub-package `foo/bar` of an excluded package `foo` is also excluded (but\npackage `bar/foo` is not). The import dependencies of excluded packages are not\nlisted, and thus not vendored.\n\nTo exclude packages, also use the \"ignore\" field of the \"vendor.json\" file.\nPackages are identified by their name, they should contain a \"/\" character\n(possibly at the end):\n```\n{\n	\"ignore\": \"test appengine foo/\",\n}\n```\n', '', 'vendor');
INSERT INTO `post` VALUES ('13', 'tcp模块完成', '2017-05-25 17:11:50', '需要读取xml模块\n读取后发送接收接收消息测试', '', '压力测试');
INSERT INTO `post` VALUES ('14', '2017 5月完成任务', '2017-05-26 14:43:59', '1.golang随机数算法转js\n\n2.webSvr添加星域后台显示\n\n3.魔域世界压力测试模拟客户端编写\n\n4.中转服务器查看cpu和内存增加粒度划分按钮，现在获得的图像可以到达分钟级别\n', '', '本月任务日志');
INSERT INTO `post` VALUES ('15', '补充账服，游服等的信号延时关断', '2017-06-01 16:45:42', '1.补充账服，游服等的信号延时关断\n\n2.测试websvr sig模块的kill -9是否能够使用\n\n3.service 的stopService 各个服务的onDestroy\n\n账服，中转服务器部分已经完成\n还有游服，聊天服务器部分没完成\n\n## 游服：\n```\n	gate.RegModule()\n	harbor.RegModule()\n	LoadModule.RegModule()\n	AuthModule.RegModule()\n	NameModule.RegModule()\n	OnlineMgr.RegModule()\n	SceneModule.RegModule()\n	SysReportModule.RegModule()\n	HttpModule.RegModule()\n	data_center.RegModule()\n	dbidfac.RegModule()\n	dbid.RegModule()\n	BattleModule.RegModule()\n\n```\n\n```go\n// OnlineMgr\nfunc (m *OnlineMgr) bindHandlers() {\n	//从一个模块向另一个模块通讯需要监听模块\n	m.sp.ListenModule(gate.MODULE_NAME, m)\n	m.sp.ListenModule(GameCommon.LOAD_MODULE_NAME, m)\n	m.sp.ListenModule(GameCommon.NAME_MODULE_NAME, m)\n	m.sp.ListenModule(GameCommon.CHAT_MODULE_NAME, m)\n	m.sp.ListenModule(GameCommon.HTTP_MODULE_NAME, m)\n   //消息处理\n	m.sp.RegHandler(m.HandleAuthSucc)\n	m.sp.RegHandler(m.NotyChgMap)\n	m.sp.RegHandler(m.HandleMsgQueryUserListC2S)\n	m.sp.RegHandler(m.HandleMsgCreateRoleC2S)\n	m.sp.RegHandler(m.HandleMsgChooseUserC2S)\n	m.sp.RegHandler(m.HandleSocketClose)\n	m.sp.RegHandler(m.HandleUserLogout)\n	m.sp.RegHandler(m.HandleQueryRandNameC2S)\n	m.sp.RegHandler(m.ReqAuthUserLogin)\n\n	m.MapBelongMgr.RegHandlers(m.sp)\n}\n\n\n// User\nfunc (self *User) SendMsgToClient(msg proto.Message) {\n	if self.scenceModule != nil {\n		self.scenceModule.SendMsgToClient(msg, self.idSession)\n	}\n}\n```\n\n##模块之间发送消息\n```go\n//self.idOnlineMgr 发送到的模块，svrmsg.ReqMapService 对应onlineMgr对应的函数参数\n//HandleReqMapService(callinfo *servicelib.CallInfo, msg *svrmsg.ReqMapService)\n//self.sp.Call 是没有带回调函数的 self.sp.Call2是带回调函数的\nret, err := self.sp.Call(self.idOnlineMgr, &svrmsg.ReqMapService{\n			Idmap: proto.Int64(idMap),\n		}, true, nil)\n		if err != nil {\n			Logger.Errorf(\"Call ReqMapService fail idMap:%v , error:%v\", idMap, err)\n			return false\n		}\n		rspMsg, ok := ret.(*svrmsg.RspMapService)\n		if !ok {\n			Logger.Errorf(\"unexpect data type %v\", reflect.TypeOf(ret))\n			return false\n		}\n		idNewScence := rspMsg.GetIdservice()\n		if idNewScence == 0 {\n			Logger.Errorf(\"idNewScence == 0\")\n			return false\n		}\n```\n要处理harbor发来的消息，还需要绑定对应模块\n```go\nfunc (self *SceneModuleService) startListenModule() {\n	self.sp.ListenModule(GameCommon.LOAD_MODULE_NAME, self)\n	self.sp.ListenModule(gate.MODULE_NAME, self)\n	self.sp.ListenModule(GameCommon.ONLINE_MGR_MODULE_NAME, self)\n	self.sp.ListenModule(GameCommon.BATTLE_MODULE_NAME, self)\n	\n	//绑定对应处理函数\n	m.sp.RegHandler(m.HandleAuthSucc)\n	m.sp.RegHandler(m.NotyChgMap)\n	m.sp.RegHandler(m.HandleMsgQueryUserListC2S)\n	m.sp.RegHandler(m.HandleMsgCreateRoleC2S)\n	m.sp.RegHandler(m.HandleMsgChooseUserC2S)\n	m.sp.RegHandler(m.HandleSocketClose)\n	m.sp.RegHandler(m.HandleUserLogout)\n	m.sp.RegHandler(m.HandleQueryRandNameC2S)\n	m.sp.RegHandler(m.ReqAuthUserLogin)\n}\n发送时候的对应模块id来自于onNewServer\nfunc (self *SceneModuleService) OnNewService(idservice uint32, name string, modulename string) {\n	if modulename == gate.MODULE_NAME {\n		if !(strings.HasPrefix(name, \"ClientGate\")) {\n			return\n		}\n	}\n	switch modulename {\n	case GameCommon.LOAD_MODULE_NAME:\n		{\n			if self.idLoadModule != 0 && self.idLoadModule != idservice {\n				Logger.Warningf(\"repeate idLoadModule set, old: %d, new: %d\", self.idLoadModule, idservice)\n			}\n			self.idLoadModule = idservice //获取对应模块id并存储，发送消息时候使用\n		}\n	case gate.MODULE_NAME:\n		{\n			if self.idClientGate != 0 && self.idClientGate != idservice {\n				Logger.Warningf(\"repeate idClientGate set, old: %d, new: %d\", self.idClientGate, idservice)\n			}\n			self.idClientGate = idservice\n		}\n	case GameCommon.ONLINE_MGR_MODULE_NAME:\n		{\n			if self.idOnlineMgr != 0 && self.idOnlineMgr != idservice {\n				Logger.Warningf(\"repeate idOnlineMgr set, old: %d, new: %d\", self.idOnlineMgr, idservice)\n			}\n			self.idOnlineMgr = idservice\n			self.gameMapMgr.RegistMapGroup(idservice)\n		}\n	case GameCommon.BATTLE_MODULE_NAME:\n		{\n			if self.idBattleModule != 0 && self.idBattleModule != idservice {\n				Logger.Warningf(\"repeate idBattleModule set, old: %d, new: %d\", self.idBattleModule, idservice)\n			}\n			self.idBattleModule = idservice\n		}\n	default:\n		Logger.Warningf(\"unexpected service notify: name %s, modulename: %s, idservice: %d\", name, modulename, idservice)\n	}\n}\n\n```\n\n### 综合以上。我应该在延时提示的时候发送消息到onlinePlayerMgr \n```go\ntype onlinePlayerMgr struct {\n	allplayers       map[uint64]*onlinePlayer //(idsession, xx)\n	useridSessionMap map[int64]uint64         //(iduser,idsession)\n	report           onlineReport\n}\n// 并利用这个allplayers发送到客户端进行提示\n//然后关闭的部分要把场景服务的人踢掉，数据进行保存\n```\n', '', '任务');
INSERT INTO `post` VALUES ('16', '2017年 6月', '2017-06-01 15:43:08', '1.账服接收工具关闭信号并延迟退出\n\n2.游服接收工具关闭信号，延迟下发通知客户端下线\n\n3.游服接收信号后，保存对应数据库数据\n\n4。游服停止服务并退出\n\n\n', '', '任务日志');

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `user_name` varchar(50) NOT NULL,
  `password` varchar(100) DEFAULT NULL,
  `thumb` varchar(500) DEFAULT NULL,
  `about_me` varchar(2000) DEFAULT NULL,
  `site_title` varchar(100) DEFAULT NULL,
  `head_bg_pic` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', 'zxx', '14e1b600b1fd579f47433b88e8d85291', '/static/uploads/1495171568.jpg', '', '任务日志', '');
